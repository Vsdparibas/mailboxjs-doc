"use strict";(self.webpackChunkmailboxjs_doc=self.webpackChunkmailboxjs_doc||[]).push([[875],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>p});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),m=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=m(e.components);return n.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},b=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=m(t),p=o,d=b["".concat(s,".").concat(p)]||b[p]||u[p]||l;return t?n.createElement(d,r(r({ref:a},c),{},{components:t})):n.createElement(d,r({ref:a},c))}));function p(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=t.length,r=new Array(l);r[0]=b;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var m=2;m<l;m++)r[m]=t[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>r});var n=t(7294),o=t(6010);const l="tabItem_Ymn6";function r(e){let{children:a,hidden:t,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,r),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>p});var n=t(7462),o=t(7294),l=t(6010),r=t(2389),i=t(7392),s=t(7094),m=t(2466);const c="tabList__CuJ",u="tabItem_LNqP";function b(e){var a;const{lazy:t,block:r,defaultValue:b,values:p,groupId:d,className:f}=e,x=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=p??x.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),h=(0,i.l)(g,((e,a)=>e.value===a.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===b?b:b??(null==(a=x.find((e=>e.props.default)))?void 0:a.props.value)??x[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:j}=(0,s.U)(),[k,M]=(0,o.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:T}=(0,m.o5)();if(null!=d){const e=v[d];null!=e&&e!==k&&g.some((a=>a.value===e))&&M(e)}const P=e=>{const a=e.currentTarget,t=w.indexOf(a),n=g[t].value;n!==k&&(T(a),M(n),null!=d&&j(d,String(n)))},N=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}null==(a=t)||a.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},f)},g.map((e=>{let{value:a,label:t,attributes:r}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:k===a?0:-1,"aria-selected":k===a,key:a,ref:e=>w.push(e),onKeyDown:N,onFocus:P,onClick:P},r,{className:(0,l.Z)("tabs__item",u,null==r?void 0:r.className,{"tabs__item--active":k===a})}),t??a)}))),t?(0,o.cloneElement)(x.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},x.map(((e,a)=>(0,o.cloneElement)(e,{key:a,hidden:e.props.value!==k})))))}function p(e){const a=(0,r.Z)();return o.createElement(b,(0,n.Z)({key:String(a)},e))}},338:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>m,toc:()=>u});var n=t(7462),o=(t(7294),t(3905)),l=t(5488),r=t(5162);const i={displayed_sidebar:"tutorialSidebar"},s="Use a mailbox",m={unversionedId:"tutorial/use-a-mailbox",id:"tutorial/use-a-mailbox",title:"Use a mailbox",description:"To use mailboxes, you need to configure an IMAP host and port",source:"@site/docs/tutorial/use-a-mailbox.md",sourceDirName:"tutorial",slug:"/tutorial/use-a-mailbox",permalink:"/docs/tutorial/use-a-mailbox",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/use-a-mailbox.md",tags:[],version:"current",frontMatter:{displayed_sidebar:"tutorialSidebar"},sidebar:"tutorialSidebar",previous:{title:"Get mailboxes name's",permalink:"/docs/tutorial/get-mailboxes-names"},next:{title:"Watch mailboxes",permalink:"/docs/tutorial/watch-mailboxes"}},c={},u=[{value:"Get mails",id:"get-mails",level:2},{value:"Delete mails",id:"delete-mails",level:2}],b={toc:u};function p(e){let{components:a,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},b,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"use-a-mailbox"},"Use a mailbox"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To use mailboxes, you need to configure an IMAP host and port")),(0,o.kt)("p",null,"With MailboxJS, you can use all your mailboxes."),(0,o.kt)("p",null,"You can get, delete, see and unsee mails."),(0,o.kt)("h2",{id:"get-mails"},"Get mails"),(0,o.kt)("p",null,"There is a code example to get mails from mailbox ",(0,o.kt)("inlineCode",{parentName:"p"},"INBOX")," :"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"esm",label:"ESM",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { MailboxJs } from 'mailboxjs';\nimport { config } from './mbjs-config'; // MailboxJsConfig\n\nconst mbjs = await new MailboxJs(config).run(); // Connects to IMAP and SMTP server\n\nconst mailboxPath = 'INBOX'; // Mailbox path (name)\nconst mails = await mbjs.getMails(mailboxPath); // Get all mails from a mailbox\n\nconsole.log(mails); // Log an array of ImapMail objects\n"))),(0,o.kt)(r.Z,{value:"cjs",label:"CJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { MailboxJs } = require('mailboxjs');\nconst { config } = require('./mbjs-config'); // MailboxJsConfig\n\nasync function runAsync() {\n  const mbjs = await new MailboxJs(config).run(); // Connects to IMAP and SMTP server\n\n  const mailboxPath = 'INBOX'; // Mailbox path (name)\n  const mails = await mbjs.getMails(mailboxPath); // Get all mails from a mailbox\n\n  console.log(mails); // Log an array of ImapMail objects\n}\n\nrunAsync();\n")))),(0,o.kt)("h2",{id:"delete-mails"},"Delete mails"),(0,o.kt)("p",null,"There is a code example to delete mails from mailbox ",(0,o.kt)("inlineCode",{parentName:"p"},"INBOX")," :"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"esm",label:"ESM",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { MailboxJs } from 'mailboxjs';\nimport { config } from './mbjs-config'; // MailboxJsConfig\n\nconst mbjs = await new MailboxJs(config).run(); // Connects to IMAP and SMTP server\n\nconst mailboxPath = 'INBOX'; // Mailbox path (name)\nconst mails = await mbjs.getMails(mailboxPath); // Get all mails from a mailbox\n\nawait mbjs.deleteMails(mailboxPath, { mails }); // Delete mails sended\n"))),(0,o.kt)(r.Z,{value:"cjs",label:"CJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { MailboxJs } = require('mailboxjs');\nconst { config } = require('./mbjs-config'); // MailboxJsConfig\n\nasync function runAsync() {\n  const mbjs = await new MailboxJs(config).run(); // Connects to IMAP and SMTP server\n\n  const mailboxPath = 'INBOX'; // Mailbox path (name)\n  const mails = await mbjs.getMails(mailboxPath); // Get all mails from a mailbox\n\n  await mbjs.deleteMails(mailboxPath, { mails }); // Delete mails sended\n}\n\nrunAsync();\n")))),(0,o.kt)("p",null,"This is another example to delete mails :"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"esm",label:"ESM",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { MailboxJs } from 'mailboxjs';\nimport { config } from './mbjs-config'; // MailboxJsConfig\n\nconst mbjs = await new MailboxJs(config).run(); // Connects to IMAP and SMTP server\n\nconst mailboxPath = 'INBOX'; // Mailbox path (name)\nconst mails = await mbjs.getMails(mailboxPath); // Get all mails from a mailbox\n\nfor (const mail of mails) {\n  await mail.delete();\n}\n"))),(0,o.kt)(r.Z,{value:"cjs",label:"CJS",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { MailboxJs } = require('mailboxjs');\nconst { config } = require('./mbjs-config'); // MailboxJsConfig\n\nasync function runAsync() {\n  const mbjs = await new MailboxJs(config).run(); // Connects to IMAP and SMTP server\n\n  const mailboxPath = 'INBOX'; // Mailbox path (name)\n  const mails = await mbjs.getMails(mailboxPath); // Get all mails from a mailbox\n\n  for (const mail of mails) {\n    await mail.delete();\n  }\n}\n\nrunAsync();\n")))),(0,o.kt)("p",null,"Now that you can manage a mailbox, we can continue to watching mailboxes in the next step."))}p.isMDXComponent=!0}}]);